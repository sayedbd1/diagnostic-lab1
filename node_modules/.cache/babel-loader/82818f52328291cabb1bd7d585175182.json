{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { getAuth, signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nimport { useEffect, useState } from \"react\";\nimport initializeAuthentication from \"../components/Login/Firebase/firebase.init\";\ninitializeAuthentication();\n\nconst useFirebase = () => {\n  _s();\n\n  const [user, setUser] = useState({});\n  const [isLoading, setLoading] = useState(true);\n  const auth = getAuth();\n\n  const signInUsingGoogle = () => {\n    const googleProvider = new GoogleAuthProvider();\n    return signInWithPopup(auth, googleProvider); //  .finally(() => setLoading(false));\n  }; //observe user state change\n\n\n  useEffect(() => {\n    const unsubscribed = onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser({});\n      }\n\n      setLoading(false);\n    });\n    return () => unsubscribed;\n  }, []);\n\n  const passwordSignUp = (email, password) => {\n    createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n      // Signed in \n      const user = userCredential.user;\n      setUser(user);\n    }).catch(error => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n    });\n  };\n\n  const passwordSignIn = (email, password) => {\n    signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n      // Signed in \n      const user = userCredential.user;\n      setUser(user);\n    }).catch(error => {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n    });\n  };\n\n  const logOut = () => {\n    setLoading(true);\n    signOut(auth).then(() => {}).finally(() => setLoading(false));\n  };\n\n  return {\n    user,\n    isLoading,\n    signInUsingGoogle,\n    passwordSignIn,\n    passwordSignUp,\n    logOut\n  };\n};\n\n_s(useFirebase, \"/XQ5dRE82neNNS/XUOp61B+wloI=\");\n\nexport default useFirebase;","map":{"version":3,"sources":["J:/New folder (2)/life-care-diagnostic-center/src/hooks/useFirebase.js"],"names":["getAuth","signInWithPopup","GoogleAuthProvider","signOut","onAuthStateChanged","createUserWithEmailAndPassword","signInWithEmailAndPassword","useEffect","useState","initializeAuthentication","useFirebase","user","setUser","isLoading","setLoading","auth","signInUsingGoogle","googleProvider","unsubscribed","passwordSignUp","email","password","then","userCredential","catch","error","errorCode","code","errorMessage","message","passwordSignIn","logOut","finally"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,eAAlB,EAAmCC,kBAAnC,EAAuDC,OAAvD,EAAgEC,kBAAhE,EAAoFC,8BAApF,EAAoHC,0BAApH,QAAsJ,eAAtJ;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,wBAAP,MAAqC,4CAArC;AAEAA,wBAAwB;;AACxB,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,SAAD,EAAYC,UAAZ,IAA0BN,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAMO,IAAI,GAAGf,OAAO,EAApB;;AACA,QAAMgB,iBAAiB,GAAG,MAAM;AAC5B,UAAMC,cAAc,GAAG,IAAIf,kBAAJ,EAAvB;AACD,WAAOD,eAAe,CAACc,IAAD,EAAOE,cAAP,CAAtB,CAF6B,CAI5B;AACH,GALD,CAJsB,CAWtB;;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMW,YAAY,GAAGd,kBAAkB,CAACW,IAAD,EAAOJ,IAAI,IAAG;AACjD,UAAGA,IAAH,EAAQ;AACJC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACH,OAFD,MAGI;AACAC,QAAAA,OAAO,CAAC,EAAD,CAAP;AACH;;AACDE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACF,KARqC,CAAvC;AASC,WAAO,MAAMI,YAAb;AACH,GAXQ,EAWN,EAXM,CAAT;;AAaA,QAAMC,cAAc,GAAG,CAACC,KAAD,EAAOC,QAAP,KAAkB;AACrChB,IAAAA,8BAA8B,CAACU,IAAD,EAAOK,KAAP,EAAcC,QAAd,CAA9B,CACLC,IADK,CACCC,cAAD,IAAoB;AACxB;AACA,YAAMZ,IAAI,GAAGY,cAAc,CAACZ,IAA5B;AACAC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACD,KALK,EAMLa,KANK,CAMEC,KAAD,IAAW;AAChB,YAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,YAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B;AACD,KATK;AAUH,GAXD;;AAYA,QAAMC,cAAc,GAAG,CAACV,KAAD,EAAQC,QAAR,KAAmB;AACtCf,IAAAA,0BAA0B,CAACS,IAAD,EAAOK,KAAP,EAAcC,QAAd,CAA1B,CACLC,IADK,CACCC,cAAD,IAAoB;AACxB;AACA,YAAMZ,IAAI,GAAGY,cAAc,CAACZ,IAA5B;AACDC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACA,KALK,EAMLa,KANK,CAMEC,KAAD,IAAW;AAChB,YAAMC,SAAS,GAAGD,KAAK,CAACE,IAAxB;AACA,YAAMC,YAAY,GAAGH,KAAK,CAACI,OAA3B;AACD,KATK;AAUH,GAXD;;AAaA,QAAME,MAAM,GAAG,MAAM;AACjBjB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAX,IAAAA,OAAO,CAACY,IAAD,CAAP,CACCO,IADD,CACM,MAAM,CAAG,CADf,EAECU,OAFD,CAES,MAAMlB,UAAU,CAAC,KAAD,CAFzB;AAGH,GALD;;AAMA,SAAM;AACFH,IAAAA,IADE;AAEFE,IAAAA,SAFE;AAGFG,IAAAA,iBAHE;AAIFc,IAAAA,cAJE;AAKFX,IAAAA,cALE;AAMFY,IAAAA;AANE,GAAN;AAQH,CAhED;;GAAMrB,W;;AAiEN,eAAeA,WAAf","sourcesContent":["import { getAuth, signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\r\nimport { useEffect, useState } from \"react\";\r\nimport initializeAuthentication from \"../components/Login/Firebase/firebase.init\";\r\n\r\ninitializeAuthentication();\r\nconst useFirebase = () => {\r\n    const [user, setUser] = useState({});\r\n    const [isLoading, setLoading] = useState(true);\r\n    const auth = getAuth();\r\n    const signInUsingGoogle = () => {\r\n        const googleProvider = new GoogleAuthProvider();\r\n       return signInWithPopup(auth, googleProvider);\r\n       \r\n        //  .finally(() => setLoading(false));\r\n    }\r\n\r\n    //observe user state change\r\n    useEffect(() => {\r\n       const unsubscribed = onAuthStateChanged(auth, user =>{\r\n           if(user){\r\n               setUser(user);\r\n           }\r\n           else{\r\n               setUser({})\r\n           }\r\n           setLoading(false);\r\n        });\r\n        return () => unsubscribed;\r\n    }, [])\r\n\r\n    const passwordSignUp = (email,password)=>{\r\n        createUserWithEmailAndPassword(auth, email, password)\r\n  .then((userCredential) => {\r\n    // Signed in \r\n    const user = userCredential.user;\r\n    setUser(user);\r\n  })\r\n  .catch((error) => {\r\n    const errorCode = error.code;\r\n    const errorMessage = error.message;\r\n  });\r\n    }\r\n    const passwordSignIn = (email, password)=>{\r\n        signInWithEmailAndPassword(auth, email, password)\r\n  .then((userCredential) => {\r\n    // Signed in \r\n    const user = userCredential.user;\r\n   setUser(user)\r\n  })\r\n  .catch((error) => {\r\n    const errorCode = error.code;\r\n    const errorMessage = error.message;\r\n  });\r\n    }\r\n\r\n    const logOut = () => {\r\n        setLoading(true);\r\n        signOut(auth)\r\n        .then(() => { })\r\n        .finally(() => setLoading(false)); \r\n    }\r\n    return{\r\n        user,\r\n        isLoading,\r\n        signInUsingGoogle,\r\n        passwordSignIn,\r\n        passwordSignUp,\r\n        logOut\r\n    }\r\n}\r\nexport default useFirebase;\r\n"]},"metadata":{},"sourceType":"module"}